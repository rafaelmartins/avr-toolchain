name: Build AVR toolchain for linux-amd64

on:
  push:
    paths:
      - '.github/workflows/linux-amd64.yml'
      - 'patches/**'
      - 'defconfig'
  workflow_dispatch:

env:
  AVR_ATAUTOMOTIVE_PACK_VERSION: "2.0.214"
  AVR_ATMEGA_PACK_VERSION: "2.0.401"
  AVR_ATTINY_PACK_VERSION: "2.0.368"
  AVR_DX_PACK_VERSION: "2.1.146"
  AVR_EX_PACK_VERSION: "2.2.56"
  CROSSTOOL_NG_VERSION: "1.25.0"

permissions:
  contents: write

concurrency:
  group: linux-amd64
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  config:
    runs-on: ubuntu-22.04
    steps:
      - name: Download crosstool-ng
        run: |
          wget -q https://github.com/rafaelmartins/crosstool-ng-build/releases/download/crosstool-ng-${CROSSTOOL_NG_VERSION}/crosstool-ng-${CROSSTOOL_NG_VERSION}-linux-amd64.tar.xz{,.sha512}
          sha512sum -c crosstool-ng-${CROSSTOOL_NG_VERSION}-linux-amd64.tar.xz.sha512
          sudo tar -xf crosstool-ng-${CROSSTOOL_NG_VERSION}-linux-amd64.tar.xz -C /

      - name: Check out code
        uses: actions/checkout@v3

      - name: Generate configuration
        run: ct-ng defconfig

      - name: Generate release data
        run: |
          echo "### crosstool-NG configuration" >> release.md
          echo >> release.md
          echo "\`\`\`" >> release.md
          ct-ng show-config >> release.md
          echo "\`\`\`" >> release.md
          echo >> release.md
          echo "### Patches" >> release.md
          echo >> release.md
          for d in patches/*; do
            pn="$(basename "$d")"
            pv="$(grep -i "^CT_${pn}_VERSION" .config | sed 's/^.*="\([0-9.]*\)"$/\1/')"
            if [[ ! -d "${d}/${pv}" ]]; then
              continue
            fi
            echo "#### ${pn}-${pv}" >> release.md
            echo >> release.md
            for p in "${d}/${pv}"/*.patch; do
              echo "- [$(basename "${p}")](/patches/${pn}/${pv}/$(basename "${p}"))" >> release.md
            done
            echo >> release.md
          done
          echo "### Additional Atmel Packs Installed" >> release.md
          echo >> release.md
          echo "- Atmel ATautomotive Series Device Support (${AVR_ATAUTOMOTIVE_PACK_VERSION})" >> release.md
          echo "- Atmel ATmega Series Device Support (${AVR_ATMEGA_PACK_VERSION})" >> release.md
          echo "- Atmel ATtiny Series Device Support (${AVR_ATTINY_PACK_VERSION})" >> release.md
          echo "- Atmel AVR-Dx Series Device Support (${AVR_DX_PACK_VERSION})" >> release.md
          echo "- Atmel AVR-Ex Series Device Support (${AVR_EX_PACK_VERSION})" >> release.md

      - name: Upload configuration artifacts
        uses: actions/upload-artifact@v3
        with:
          name: config
          path: |
            .config
            release.md

  atpacks:
    runs-on: ubuntu-22.04
    needs: config
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: avr-toolchain

      - name: Download configuration artifacts
        uses: actions/download-artifact@v3
        with:
          name: config
          path: avr-toolchain

      - name: Download atpacks and extract to expected directories
        run: |
          GCC_VER="$(grep ^CT_GCC_VERSION= avr-toolchain/.config | sed 's/^.*="\([0-9.]*\)"$/\1/')"
          for p in "ATautomotive_DFP.${AVR_ATAUTOMOTIVE_PACK_VERSION}" \
                   "ATmega_DFP.${AVR_ATMEGA_PACK_VERSION}" \
                   "ATtiny_DFP.${AVR_ATTINY_PACK_VERSION}" \
                   "AVR-Dx_DFP.${AVR_DX_PACK_VERSION}" \
                   "AVR-Ex_DFP.${AVR_EX_PACK_VERSION}"
          do
            mkdir tmp
            pushd tmp > /dev/null
            wget -q "http://packs.download.atmel.com/Atmel.${p}.atpack"
            unzip "Atmel.${p}.atpack"
            mkdir -p ../prefix/avr/avr/include ../prefix/avr/lib/gcc/avr/${GCC_VER}/device-specs
            cp -rv include/avr ../prefix/avr/avr/include/
            cp -v gcc/dev/*/device-specs/* ../prefix/avr/lib/gcc/avr/${GCC_VER}/device-specs/
            for d in gcc/dev/*/avr*; do
              dir="$(basename $d)"
              mkdir -p "../prefix/avr/avr/lib/${dir}/"
              cp -rv "${d}"/* "../prefix/avr/avr/lib/${dir}/"
            done
            popd > /dev/null
            rm -rf tmp
          done
          mkdir -p prefix/avr/share/licenses/atpack
          cp -v avr-toolchain/LICENSE.atpack prefix/avr/share/licenses/atpack/LICENSE
          tar -cvJf atpacks.tar.xz -C prefix avr

      - name: Upload atpacks artifact
        uses: actions/upload-artifact@v3
        with:
          name: atpacks
          path: atpacks.tar.xz

  build:
    runs-on: ubuntu-22.04
    needs: config
    steps:
      - name: Download crosstool-ng
        run: |
          wget -q https://github.com/rafaelmartins/crosstool-ng-build/releases/download/crosstool-ng-${CROSSTOOL_NG_VERSION}/crosstool-ng-${CROSSTOOL_NG_VERSION}-linux-amd64.tar.xz{,.sha512}
          sha512sum -c crosstool-ng-${CROSSTOOL_NG_VERSION}-linux-amd64.tar.xz.sha512
          sudo tar -xf crosstool-ng-${CROSSTOOL_NG_VERSION}-linux-amd64.tar.xz -C /

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download configuration artifacts
        uses: actions/download-artifact@v3
        with:
          name: config

      - name: Build toolchain
        run: CT_PREFIX="$(pwd)/prefix" ct-ng build

        # for testing without building toolchain
        #run: ct-ng show-config && mkdir -p prefix/avr && touch prefix/avr/.keep

      - name: Create pristine tarball
        run: tar -cJvf avr-toolchain-linux-amd64.tar.xz -C prefix avr

      - name: Upload pristine tarball artifact
        uses: actions/upload-artifact@v3
        with:
          name: avr-toolchain-linux-amd64-pristine
          path: avr-toolchain-linux-amd64.tar.xz

  integration:
    runs-on: ubuntu-22.04
    needs:
      - atpacks
      - build
    steps:
      - name: Download pristine tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: avr-toolchain-linux-amd64-pristine

      - name: Download atpacks artifact
        uses: actions/download-artifact@v3
        with:
          name: atpacks

      - name: Extract files
        run: |
          mkdir prefix
          tar -xvf avr-toolchain-linux-amd64.tar.xz -C prefix/
          tar -xvf atpacks.tar.xz -C prefix/

      - name: Get version
        id: date
        run: |
          date -u +'%Y%m%d%H%M' > VERSION
          echo "::set-output name=date::$(cat VERSION)"

      - name: Create final tarball
        run: |
          tar -cJvf "avr-toolchain-linux-amd64-${{ steps.date.outputs.date }}.tar.xz" -C prefix avr
          sha512sum "avr-toolchain-linux-amd64-${{ steps.date.outputs.date }}.tar.xz" > "avr-toolchain-linux-amd64-${{ steps.date.outputs.date }}.tar.xz.sha512"

      - name: Upload final tarball artifacts
        uses: actions/upload-artifact@v3
        with:
          name: avr-toolchain-linux-amd64
          path: |
            VERSION
            avr-toolchain-linux-amd64-${{ steps.date.outputs.date }}.tar.xz*

  deploy:
    environment: releases
    runs-on: ubuntu-22.04
    needs:
      - config
      - integration
    steps:
      - name: Download configuration artifacts
        uses: actions/download-artifact@v3
        with:
          name: config

      - name: Download final tarball artifacts
        uses: actions/download-artifact@v3
        with:
          name: avr-toolchain-linux-amd64

      - name: Get version
        id: date
        run: echo "::set-output name=date::$(cat VERSION)"

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "avr-toolchain-linux-amd64-${{ steps.date.outputs.date }}.tar.xz*"
          tag: avr-toolchain-linux-amd64-${{ steps.date.outputs.date }}
          commit: ${{ github.sha }}
          bodyFile: release.md
          allowUpdates: true
          removeArtifacts: true
